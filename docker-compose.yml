services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Testing2.
      POSTGRES_DB: postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:5000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:5000
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "pV7dL_7oQ7uz0Kv8oQmH1A"
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: >
      /bin/sh -c "
        echo 'Waiting for Kafka to be ready...';
        sleep 5;
        echo 'Attempting to create topic...';
        kafka-topics --create --if-not-exists --topic user_credentials --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1;
        echo 'Topic creation command finished';"

  database-listener:
    build: ./services/database-listener-service
    env_file:
      - ./services/database-listener-service/.env
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  crud-service:
    build: ./services/crud-service
    env_file:
      - ./services/crud-service/.env
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"

  websocket-connection:
    build: ./services/websocket-connection-service
    env_file:
      - ./services/websocket-connection-service/.env
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    ports:
      - "3002:5001"

volumes:
  kafka_data:
  pg_data:
